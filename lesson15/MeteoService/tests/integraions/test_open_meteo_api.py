import json

import pytest

from meteo_service.config import Config
from meteo_service.integrations.open_meteo_api import OpenMeteApi, Probe




@pytest.fixture
def meteo_api_response() -> str:
    res = {"latitude": 59.9293, "longitude": 30.317093, "generationtime_ms": 2.460002899169922,
            "utc_offset_seconds": 0, "timezone": "GMT", "timezone_abbreviation": "GMT", "elevation": 19.0,
            "current_weather": {"temperature": 0.6, "windspeed": 12.2, "winddirection": 31.0, "weathercode": 51,
                                "time": "2023-03-31T17:00"},
            "hourly_units": {"time": "iso8601", "temperature_2m": "Â°C", "relativehumidity_2m": "%",
                             "windspeed_10m": "km/h"}, "hourly": {
            "time": ["2023-03-31T00:00", "2023-03-31T01:00", "2023-03-31T02:00", "2023-03-31T03:00", "2023-03-31T04:00",
                     "2023-03-31T05:00", "2023-03-31T06:00", "2023-03-31T07:00", "2023-03-31T08:00", "2023-03-31T09:00",
                     "2023-03-31T10:00", "2023-03-31T11:00", "2023-03-31T12:00", "2023-03-31T13:00", "2023-03-31T14:00",
                     "2023-03-31T15:00", "2023-03-31T16:00", "2023-03-31T17:00", "2023-03-31T18:00", "2023-03-31T19:00",
                     "2023-03-31T20:00", "2023-03-31T21:00", "2023-03-31T22:00", "2023-03-31T23:00", "2023-04-01T00:00",
                     "2023-04-01T01:00", "2023-04-01T02:00", "2023-04-01T03:00", "2023-04-01T04:00", "2023-04-01T05:00",
                     "2023-04-01T06:00", "2023-04-01T07:00", "2023-04-01T08:00", "2023-04-01T09:00", "2023-04-01T10:00",
                     "2023-04-01T11:00", "2023-04-01T12:00", "2023-04-01T13:00", "2023-04-01T14:00", "2023-04-01T15:00",
                     "2023-04-01T16:00", "2023-04-01T17:00", "2023-04-01T18:00", "2023-04-01T19:00", "2023-04-01T20:00",
                     "2023-04-01T21:00", "2023-04-01T22:00", "2023-04-01T23:00", "2023-04-02T00:00", "2023-04-02T01:00",
                     "2023-04-02T02:00", "2023-04-02T03:00", "2023-04-02T04:00", "2023-04-02T05:00", "2023-04-02T06:00",
                     "2023-04-02T07:00", "2023-04-02T08:00", "2023-04-02T09:00", "2023-04-02T10:00", "2023-04-02T11:00",
                     "2023-04-02T12:00", "2023-04-02T13:00", "2023-04-02T14:00", "2023-04-02T15:00", "2023-04-02T16:00",
                     "2023-04-02T17:00", "2023-04-02T18:00", "2023-04-02T19:00", "2023-04-02T20:00", "2023-04-02T21:00",
                     "2023-04-02T22:00", "2023-04-02T23:00", "2023-04-03T00:00", "2023-04-03T01:00", "2023-04-03T02:00",
                     "2023-04-03T03:00", "2023-04-03T04:00", "2023-04-03T05:00", "2023-04-03T06:00", "2023-04-03T07:00",
                     "2023-04-03T08:00", "2023-04-03T09:00", "2023-04-03T10:00", "2023-04-03T11:00", "2023-04-03T12:00",
                     "2023-04-03T13:00", "2023-04-03T14:00", "2023-04-03T15:00", "2023-04-03T16:00", "2023-04-03T17:00",
                     "2023-04-03T18:00", "2023-04-03T19:00", "2023-04-03T20:00", "2023-04-03T21:00", "2023-04-03T22:00",
                     "2023-04-03T23:00", "2023-04-04T00:00", "2023-04-04T01:00", "2023-04-04T02:00", "2023-04-04T03:00",
                     "2023-04-04T04:00", "2023-04-04T05:00", "2023-04-04T06:00", "2023-04-04T07:00", "2023-04-04T08:00",
                     "2023-04-04T09:00", "2023-04-04T10:00", "2023-04-04T11:00", "2023-04-04T12:00", "2023-04-04T13:00",
                     "2023-04-04T14:00", "2023-04-04T15:00", "2023-04-04T16:00", "2023-04-04T17:00", "2023-04-04T18:00",
                     "2023-04-04T19:00", "2023-04-04T20:00", "2023-04-04T21:00", "2023-04-04T22:00", "2023-04-04T23:00",
                     "2023-04-05T00:00", "2023-04-05T01:00", "2023-04-05T02:00", "2023-04-05T03:00", "2023-04-05T04:00",
                     "2023-04-05T05:00", "2023-04-05T06:00", "2023-04-05T07:00", "2023-04-05T08:00", "2023-04-05T09:00",
                     "2023-04-05T10:00", "2023-04-05T11:00", "2023-04-05T12:00", "2023-04-05T13:00", "2023-04-05T14:00",
                     "2023-04-05T15:00", "2023-04-05T16:00", "2023-04-05T17:00", "2023-04-05T18:00", "2023-04-05T19:00",
                     "2023-04-05T20:00", "2023-04-05T21:00", "2023-04-05T22:00", "2023-04-05T23:00", "2023-04-06T00:00",
                     "2023-04-06T01:00", "2023-04-06T02:00", "2023-04-06T03:00", "2023-04-06T04:00", "2023-04-06T05:00",
                     "2023-04-06T06:00", "2023-04-06T07:00", "2023-04-06T08:00", "2023-04-06T09:00", "2023-04-06T10:00",
                     "2023-04-06T11:00", "2023-04-06T12:00", "2023-04-06T13:00", "2023-04-06T14:00", "2023-04-06T15:00",
                     "2023-04-06T16:00", "2023-04-06T17:00", "2023-04-06T18:00", "2023-04-06T19:00", "2023-04-06T20:00",
                     "2023-04-06T21:00", "2023-04-06T22:00", "2023-04-06T23:00"],
            "temperature_2m": [-0.9, -0.9, -0.9, -0.9, -1.0, -0.7, -0.3, 0.4, 1.0, 1.8, 2.4, 2.7, 3.0, 3.1, 2.7, 2.3,
                               1.4, 0.6, 0.2, -0.0, -0.1, -0.2, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.2, -0.0, -0.1,
                               -0.2, -0.2, 0.0, 0.3, 0.5, 0.5, 0.4, 0.1, -0.0, 0.1, 0.1, 0.2, 0.0, -0.1, 0.6, 0.5, 0.0,
                               -0.5, -1.3, -1.9, -1.9, -2.0, -2.2, -1.7, -0.7, 0.2, 0.8, 1.3, 1.5, 1.6, 1.6, 1.4, 1.1,
                               0.9, 0.4, 0.2, -0.2, -0.5, -0.7, -0.9, -1.2, -1.4, -1.7, -3.3, -3.5, -3.7, -3.6, -3.5,
                               -3.2, -2.8, -2.3, -1.7, -1.5, -1.2, -1.1, -1.1, -1.3, -1.5, -1.8, -2.1, -2.3, -2.5, -2.7,
                               -2.8, -2.9, -2.9, -3.0, -3.1, -3.1, -3.0, -2.9, -2.7, -2.5, -2.2, -1.8, -1.6, -1.5, -1.3,
                               -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.3, -1.4, -1.6, -1.9, -2.0, -2.1, -2.1,
                               -2.1, -2.1, -1.8, -1.2, -0.4, 0.5, 1.0, 1.4, 1.8, 1.9, 1.6, 1.0, 0.5, -0.1, -0.8, -1.0,
                               -1.1, -1.2, -1.3, -1.5, -1.8, -2.1, -2.6, -2.8, -2.7, -2.3, -1.5, -0.6, 0.4, 1.6, 2.4,
                               3.1, 3.7, 4.0, 4.0, 3.8, 3.3, 2.6, 1.8, 1.2, 0.7, 0.2, 0.1, 0.2],
            "relativehumidity_2m": [82, 80, 81, 81, 81, 79, 78, 75, 73, 66, 64, 67, 71, 72, 76, 80, 81, 82, 83, 84, 85,
                                    85, 84, 84, 85, 86, 86, 86, 87, 86, 86, 85, 85, 83, 82, 82, 81, 77, 75, 74, 71, 69,
                                    68, 72, 76, 71, 70, 73, 73, 76, 79, 79, 79, 78, 76, 71, 65, 60, 56, 56, 57, 56, 61,
                                    62, 63, 70, 69, 73, 74, 74, 75, 76, 77, 78, 85, 85, 85, 84, 83, 83, 80, 79, 73, 70,
                                    69, 69, 68, 71, 74, 77, 80, 83, 85, 88, 89, 90, 90, 90, 90, 90, 90, 90, 89, 88, 88,
                                    87, 87, 87, 87, 87, 88, 89, 89, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 90, 90, 89,
                                    87, 84, 80, 75, 72, 69, 66, 64, 64, 64, 66, 70, 73, 74, 73, 73, 74, 75, 76, 77, 78,
                                    78, 78, 78, 76, 73, 70, 66, 64, 61, 59, 58, 57, 57, 58, 60, 64, 68, 73, 79, 82, 84],
            "windspeed_10m": [7.6, 6.8, 4.3, 4.3, 7.2, 5.8, 5.0, 8.3, 6.5, 6.5, 5.8, 5.8, 6.1, 7.6, 8.6, 9.7, 11.5,
                              12.2, 12.2, 12.6, 14.0, 14.8, 15.1, 15.5, 15.1, 14.0, 14.0, 15.1, 14.8, 14.8, 13.7, 13.0,
                              12.6, 12.2, 12.2, 12.2, 12.6, 14.0, 13.3, 11.9, 10.4, 8.3, 6.1, 5.8, 7.2, 10.8, 15.1,
                              16.2, 16.2, 16.9, 16.9, 16.2, 14.8, 14.8, 13.7, 15.5, 17.6, 18.7, 16.9, 17.3, 16.9, 18.4,
                              19.1, 18.0, 17.6, 15.5, 19.1, 20.2, 20.9, 22.7, 22.7, 22.7, 22.0, 22.3, 15.3, 15.9, 15.9,
                              16.9, 18.8, 18.5, 19.4, 19.7, 19.7, 19.6, 20.7, 19.5, 19.6, 18.4, 17.6, 17.1, 17.3, 16.8,
                              16.5, 15.8, 15.3, 14.5, 13.5, 13.0, 12.8, 12.3, 12.3, 12.0, 12.0, 11.8, 11.8, 11.6, 11.6,
                              11.6, 11.3, 11.0, 10.8, 10.0, 9.2, 8.2, 7.1, 7.1, 7.9, 8.8, 9.1, 8.9, 8.9, 8.9, 8.9, 8.9,
                              9.4, 9.9, 10.4, 10.7, 10.5, 10.8, 11.3, 11.5, 12.2, 12.7, 12.4, 11.6, 10.8, 10.0, 9.3,
                              9.4, 9.7, 10.5, 10.7, 11.0, 11.4, 11.8, 11.8, 12.3, 13.0, 13.6, 14.5, 14.9, 15.4, 15.9,
                              15.9, 15.9, 15.9, 15.7, 15.5, 15.2, 14.9, 14.5, 13.8, 13.0, 12.3, 11.5, 11.2, 11.2]}}
    return json.dumps(res)


@pytest.fixture
def meteo_api(test_config: Config) -> OpenMeteApi:
    return OpenMeteApi(test_config.open_meteo_api)


@pytest.mark.asyncio
async def test_meteo_api(mocked, meteo_api: OpenMeteApi, meteo_api_response: dict):
    mocked.get('http://test_meteo_api.com?latitude=59.938732&longitude=30.316229&hourly=temperature_2m,windspeed_10m',
               status=200,
               body=meteo_api_response)
    res = await meteo_api.forecats("Saint-Petersburg, Russia")
    assert len(res) == 168
    for item in res:
        assert isinstance(item, Probe)



@pytest.mark.asyncio
async def test_get_weather(mocked, meteo_api: OpenMeteApi, meteo_api_response: dict, test_client):
    mocked.get('http://test_meteo_api.com?latitude=59.938732&longitude=30.316229&hourly=temperature_2m,windspeed_10m',
               status=200,
               body=meteo_api_response)
    res = test_client.get("/api/weather", params={"city" : "Saint-Petersburg, Russia"})
    assert res.status_code == 200
    assert len(res.json()) == 168
    for item in res.json():
        assert isinstance(item, Probe)

